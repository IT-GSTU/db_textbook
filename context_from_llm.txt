## Укрупненные Вопросы по Учебной Дисциплине "Базы Данных" и Выборка Ключевой Информации

Вот 14 укрупненных и емких вопросов, охватывающих содержание учебной дисциплины "Базы данных", а также выборка ключевой информации из предоставленных учебных пособий для ответов на эти вопросы.

**1. Эволюция баз данных: от файловых систем к СУБД. Определения и назначение БД и СУБД.**

*   **Ключевая информация:**
    *   **Данные:** Формализованное представление информации, пригодное для передачи, связи или обработки.
    *   **База данных (БД):** Совокупность данных, организованных в соответствии с концептуальной структурой, описывающей характеристики этих данных и взаимоотношения между соответствующими сущностями, поддерживающей одну или более областей применения.
    *   **Система управления базами данных (СУБД):** Система (базирующаяся на программном и аппаратном обеспечении) для описания, создания, использования, контроля и управления базами данных.
    *   **Предпосылки:** Необходимость организации больших объемов данных, обеспечения целостности, независимости данных от приложений, эффективного доступа и совместного использования данных.
    *   **Роль СУБД:** Управление данными, обеспечение целостности, безопасности, параллельного доступа, восстановления после сбоев.

**2. Модели данных: классификация, сравнительный анализ (иерархическая, сетевая, объектно-ориентированная, постреляционная).**

*   **Ключевая информация:**
    *   **Модель базы данных:** Способ описания базы данных с помощью формализованного (в т.ч. графического) языка на некотором уровне абстракции.
    *   **Иерархическая модель:** Данные организованы в виде древовидной структуры. *Достоинства:* Простота реализации для иерархических данных. *Недостатки:* Сложность представления связей "многие ко многим", жесткость структуры.
    *   **Сетевая модель:** Расширение иерархической, позволяющее узлу иметь несколько родителей. *Достоинства:* Большая гибкость, чем у иерархической. *Недостатки:* Сложность навигации, сложность модификации структуры.
    *   **Объектно-ориентированная модель:** Данные представляются в виде объектов, сочетающих данные и методы. *Достоинства:* Поддержка сложных типов данных, наследования, инкапсуляции. *Недостатки:* Сложность реализации, отсутствие стандартов.
    *   **Постреляционная модель:** Развитие реляционной модели, включающее объектно-ориентированные возможности. *Достоинства:* Сочетание преимуществ реляционной и объектно-ориентированной моделей. *Недостатки:* Сложность реализации, отсутствие единого стандарта.

**3. Реляционная модель данных: основные понятия и определения (отношение, атрибут, кортеж, домен, схема отношения, степень и кардинальность отношения).**

*   **Ключевая информация:**
    *   **Отношение (Relation):** Множество кортежей (записей, строк таблицы), обладающих одинаковым набором атрибутов (свойств, полей, столбцов таблицы).
    *   **Атрибут (Attribute):** Именованное свойство сущности (отношения). Столбец (колонка) таблицы.
    *   **Кортеж (Tuple):** Часть отношения, представляющая собой уникальную взаимосвязанную комбинацию значений, каждое из которых соответствует своему атрибуту. Строка (запись) таблицы.
    *   **Домен данных (Attribute domain):** Набор всех возможных значений атрибута отношения.
    *   **Схема отношения:** Описание атрибутов отношения (указание их имён, типов данных и иных свойств).
    *   **Степень отношения (арность):** Количество атрибутов в отношении.
    *   **Кардинальность отношения (мощность):** Количество кортежей в отношении.

**4. Реляционная модель данных: ключи отношений (потенциальный, первичный, альтернативный, внешний).**

*   **Ключевая информация:**
    *   **Ключ (Key):** Идентификатор, являющийся частью набора элементов данных.
    *   **Суперключ (Superkey):** Подмножество атрибутов отношения, уникально идентифицирующее любой кортеж.
    *   **Потенциальный ключ (Candidate Key):** Несократимое подмножество атрибутов отношения, уникально идентифицирующее любой кортеж.
    *   **Первичный ключ (Primary Key):** Потенциальный ключ, выбранный в качестве основного средства гарантированной идентификации кортежей отношения.
    *   **Альтернативный ключ (Alternate Key):** Потенциальный ключ отношения, не выбранный в качестве первичного ключа.
    *   **Внешний ключ (Foreign Key):** Атрибут (или группа атрибутов) отношения, содержащий в себе копии значений первичного ключа другого отношения.

**5. Реляционная модель данных: свойства реляционного отношения, нормальные формы (1NF, 2NF, 3NF, BCNF).**

*   **Ключевая информация:**
    *   **Свойства реляционного отношения:**
        *   Атомарность атрибутов.
        *   Уникальность кортежей.
        *   Неупорядоченность атрибутов.
        *   Неупорядоченность кортежей.
    *   **Нормализация:** Процесс декомпозиции отношения на набор проекций, удовлетворяющих определенным нормальным формам.
    *   **1NF:** Все атрибуты атомарны.
    *   **2NF:** Находится в 1NF и каждый неключевой атрибут функционально полно зависит от первичного ключа.
    *   **3NF:** Находится в 2NF и не содержит транзитивных функциональных зависимостей неключевых атрибутов от первичного ключа.
    *   **BCNF:** Каждый детерминант функциональной зависимости является потенциальным ключом.

**6. Реляционная модель данных: нормальные формы (4NF, 5NF, DKNF, 6NF).**

*   **Ключевая информация:**
    *   **4NF:** Находится в BCNF и не содержит нетривиальных многозначных зависимостей.
    *   **5NF:** Находится в 4NF и каждая проекция, определяющая любую из зависимостей соединения, содержит потенциальный ключ.
    *   **DKNF:** Все ограничения и зависимости являются следствиями ограничений доменов и ключей.
    *   **6NF:** Не допускает никакой декомпозиции без потерь, т.е. любые имеющиеся в ней зависимости соединения являются тривиальными.

**7. Целостность данных в реляционной модели: виды целостности, механизмы обеспечения.**

*   **Ключевая информация:**
    *   **Целостность данных:** Правила и средства, обеспечивающие надежную реализацию установленных межтабличных связей между всеми данными, содержащимися в базе.
    *   **Виды целостности:**
        *   Структурная целостность.
        *   Языковая целостность.
        *   Ссылочная целостность.
        *   Семантическая целостность.
    *   **Механизмы обеспечения целостности:**
        *   Ограничения (Constraints): PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK, DEFAULT.
        *   Триггеры.
        *   Хранимые процедуры.

**8. Языки для выполнения операций над реляционными отношениями: реляционная алгебра (основные операции).**

*   **Ключевая информация:**
    *   **Реляционная алгебра:** Процедурный язык обработки реляционных таблиц, где в качестве операндов выступают таблицы в целом.
    *   **Основные операции:**
        *   Объединение (Union).
        *   Разность (Difference).
        *   Декартово произведение (Cartesian Product).
        *   Пересечение (Intersection).
        *   Проекция (Projection).
        *   Выборка (Selection).
        *   Соединение (Join).
        *   Деление (Division).

**9. Языки для выполнения операций над реляционными отношениями: реляционное исчисление (доменов и кортежей).**

*   **Ключевая информация:**
    *   **Реляционное исчисление:** Непроцедурный язык, где запрос создается путем определения таблицы запроса за один шаг.
    *   **Реляционное исчисление кортежей:** Использует кортежные переменные, предикаты и кванторы.
    *   **Реляционное исчисление доменов:** Переменные принимают значения в доменах, а не являются кортежами.
    *   **Целевой список:** Определяет атрибуты отношения решения.
    *   **Определяющее выражение:** Условие, на основании которого отбираются значения из базы данных.

**10. Проектирование баз данных: этапы, нисходящее и восходящее проектирование, требования к базам данных.**

*   **Ключевая информация:**
    *   **Этапы проектирования:**
        *   Определение требований.
        *   Концептуальное проектирование (ER-модель).
        *   Логическое проектирование (реляционная схема).
        *   Физическое проектирование (структуры хранения, индексы).
    *   **Нисходящее проектирование:** Движение от предметной области к физической реализации.
    *   **Восходящее проектирование:** Движение от запросов к предметной области.
    *   **Требования к базам данных:**
        *   Адекватность предметной области.
        *   Удобство использования.
        *   Производительность.
        *   Защищенность данных.

**11. Концептуальное проектирование баз данных: метод ER-диаграмм, нотации, примеры.**

*   **Ключевая информация:**
    *   **Цель:** Создание концептуальной модели, отражающей основные сущности предметной области, их атрибуты и связи между ними.
    *   **Метод ER-диаграмм:** Использование сущностей, атрибутов и связей для описания предметной области.
    *   **Нотации:** UML, IDEF1X, нотация Чена.
    *   **Сущность:** Предмет или объект, о котором необходимо хранить информацию.
    *   **Атрибут:** Свойство сущности.
    *   **Связь:** Отношение между сущностями.
    *   **Типы связей:** Один к одному, один ко многим, многие ко многим.

**12. Логическое проектирование баз данных: преобразование ER-модели в реляционную схему, нормализация.**

*   **Ключевая информация:**
    *   **Преобразование ER-модели:**
        *   Сущность -> Таблица.
        *   Атрибут -> Столбец.
        *   Связь 1:M -> Внешний ключ в дочерней таблице.
        *   Связь M:N -> Создание промежуточной таблицы.
    *   **Нормализация:** Процесс декомпозиции отношений для устранения избыточности и аномалий.

**13. Физическое проектирование баз данных: выбор типов данных, создание индексов, оптимизация производительности.**

*   **Ключевая информация:**
    *   **Типы данных:** Конкретизация типов данных для каждого атрибута с учетом особенностей СУБД.
    *   **Индексы:** Создание индексов для ускорения поиска данных.
        *   Простые и составные индексы.
        *   Кластерные и некластерные индексы.
    *   **Метод доступа (storage engine):** Программный компонент, используемый СУБД для добавления, чтения, обновления и удаления данных.
    *   **Оптимизация производительности:** Учет особенностей работы СУБД, выбор оптимальных типов данных, создание эффективных индексов, использование кэширования.

**14. Процедурные расширения SQL: Transact-SQL (MS SQL Server), хранимые процедуры, функции, триггеры.**

*   **Ключевая информация:**
    *   **Хранимая процедура:** Подпрограмма, хранимая на сервере и вызываемая по имени.
    *   **Функция:** Подпрограмма, возвращающая значение и используемая в выражениях SQL.
    *   **Триггер:** Подпрограмма, автоматически выполняемая при наступлении определенного события (INSERT, UPDATE, DELETE).
    *   **Transact-SQL:** Процедурное расширение SQL для MS SQL Server.
    *   **Назначение процедурных расширений:** Реализация сложной логики, повышение производительности, обеспечение безопасности, контроль целостности данных.